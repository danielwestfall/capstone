{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clean\\\\Desktop\\\\next-restaurant-05-master\\\\components\\\\restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n\t\tquery {\n\t\t\trestaurants {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tdescription\n\t\t\t\timage {\n\t\t\t\t\turl\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 22\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 20\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 20\n    }\n  }, \"Not found\");\n  console.log(`Query Data: ${data.restaurants}`);\n  let searchQuery = data.restaurants.filter(res => {\n    return res.name.toLowerCase().includes(props.search);\n  });\n  let restId = searchQuery[0].id; // definet renderer for Dishes\n\n  const renderDishes = restaurantID => {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 10\n      }\n    }, \" \");\n  };\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 4\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337` + res.image.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 6\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 6\n      }\n    }, __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 6\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setRestaurantID(res.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, res.name)))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 4\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }\n    }, renderDishes(restaurantID)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 10\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/clean/Desktop/next-restaurant-05-master/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","filter","res","name","toLowerCase","includes","search","restId","id","renderDishes","length","restList","map","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\r\nimport Dishes from \"./dishes\";\r\nimport { useContext, useState } from \"react\";\r\n\r\nimport AppContext from \"./context\";\r\nimport {\r\n\tButton,\r\n\tCard,\r\n\tCardBody,\r\n\tCardImg,\r\n\tCardText,\r\n\tCardTitle,\r\n\tContainer,\r\n\tRow,\r\n\tCol,\r\n} from \"reactstrap\";\r\n\r\nfunction RestaurantList(props) {\r\n\tconst [restaurantID, setRestaurantID] = useState(0);\r\n\tconst { cart } = useContext(AppContext);\r\n\tconst [state, setState] = useState(cart);\r\n\tconst GET_RESTAURANTS = gql`\r\n\t\tquery {\r\n\t\t\trestaurants {\r\n\t\t\t\tid\r\n\t\t\t\tname\r\n\t\t\t\tdescription\r\n\t\t\t\timage {\r\n\t\t\t\t\turl\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t`;\r\n\tconst { loading, error, data } = useQuery(GET_RESTAURANTS);\r\n\tif (loading) return <p>Loading...</p>;\r\n\tif (error) return <p>ERROR</p>;\r\n\tif (!data) return <p>Not found</p>;\r\n\tconsole.log(`Query Data: ${data.restaurants}`);\r\n\r\n\tlet searchQuery = data.restaurants.filter((res) => {\r\n\t\treturn res.name.toLowerCase().includes(props.search);\r\n\t});\r\n\r\n\tlet restId = searchQuery[0].id;\r\n\r\n\t// definet renderer for Dishes\r\n\tconst renderDishes = (restaurantID) => {\r\n\t\treturn <Dishes restId={restaurantID}> </Dishes>;\r\n\t};\r\n\tif (searchQuery.length > 0) {\r\n\t\tconst restList = searchQuery.map((res) => (\r\n\t\t\t<Col xs='6' sm='4' key={res.id}>\r\n\t\t\t\t<Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\r\n\t\t\t\t\t<CardImg\r\n\t\t\t\t\t\ttop={true}\r\n\t\t\t\t\t\tstyle={{ height: 200 }}\r\n\t\t\t\t\t\tsrc={`http://localhost:1337` + res.image.url}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<CardBody>\r\n\t\t\t\t\t\t<CardText>{res.description}</CardText>\r\n\t\t\t\t\t</CardBody>\r\n\t\t\t\t\t<div className='card-footer'>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tcolor='info'\r\n\t\t\t\t\t\t\tonClick={() => setRestaurantID(res.id)}>\r\n\t\t\t\t\t\t\t{res.name}\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Card>\r\n\t\t\t</Col>\r\n\t\t));\r\n\r\n\t\treturn (\r\n\t\t\t<Container>\r\n\t\t\t\t<Row xs='3'>{restList}</Row>\r\n\r\n\t\t\t\t<Row xs='3'>{renderDishes(restaurantID)}</Row>\r\n\t\t\t</Container>\r\n\t\t);\r\n\t} else {\r\n\t\treturn <h1> No Restaurants Found</h1>;\r\n\t}\r\n}\r\nexport default RestaurantList;\r\n"]},"metadata":{},"sourceType":"module"}